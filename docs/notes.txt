### Switching to Tailscale OAuth in GitHub Actions

To transition from using Tailscale auth keys to OAuth keys and client ID secrets in your GitHub Actions deployment, you can follow a straightforward process. This approach allows your workflow to authenticate with your Tailscale tailnet, delete old server connections, and read IP addresses securely. Below are the key steps and guidance to achieve this.

- **Key Points:**
  - Create an OAuth client in the Tailscale admin console with appropriate scopes (`auth_keys` and `devices:core`) and tags.
  - Store the OAuth client ID, secret, and tailnet identifier as GitHub secrets.
  - Update your GitHub Actions workflow to use the Tailscale GitHub Action for network connectivity and make API calls to manage devices.
  - Use the OAuth client to obtain a short-lived access token for API operations, ensuring secure and scoped access.
  - Ensure proper handling of secrets to maintain security.

#### Step 1: Create an OAuth Client
In your Tailscale admin console, create an OAuth client with the necessary permissions to connect to your tailnet and manage devices. Select the `auth_keys` scope for the GitHub Action to create an ephemeral node and the `devices:core` scope to list and delete devices. Assign appropriate tags to define access permissions for the nodes created by your workflow. After creation, note down the client ID and client secret.

#### Step 2: Store Secrets in GitHub
Add the OAuth client ID, client secret, and your tailnet identifier as encrypted secrets in your GitHub repository. This ensures secure storage and access within your workflow.

#### Step 3: Update Your GitHub Actions Workflow
Modify your GitHub Actions workflow to include the Tailscale GitHub Action, which connects your runner to the tailnet. Then, add steps to request an access token using the OAuth client credentials and use it to make API calls to list devices (to read IP addresses) and delete old server connections.

#### Example Workflow
Below is an example of how your GitHub Actions workflow might look to accomplish these tasks. This example assumes you have the necessary secrets configured and includes placeholders for device management logic.

```yaml
name: Tailscale Deployment

on: [push]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Tailscale
      uses: tailscale/github-action@v3
      with:
        oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
        oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
        tags: tag:ci  # Replace with your chosen tags

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Get Tailscale access token
      id: get_token
      run: |
        TOKEN=$(curl -s -X POST https://api.tailscale.com/oauth/token \
          -d "grant_type=client_credentials" \
          -d "client_id=${{ secrets.TS_OAUTH_CLIENT_ID }}" \
          -d "client_secret=${{ secrets.TS_OAUTH_SECRET }}" | jq -r .access_token)
        echo "TOKEN=$TOKEN" >> $GITHUB_ENV

    - name: List devices
      id: list_devices
      run: |
        curl -s -X GET https://api.tailscale.com/api/v2/tailnet/${{ secrets.TAILSCALE_TAILNET }}/devices \
          -H "Authorization: Bearer $TOKEN" > devices.json
        cat devices.json

    - name: Delete old devices
      run: |
        # Example: Delete a device by ID (replace with your logic to identify old devices)
        DEVICE_ID=$(jq -r '.devices[] | select(.hostname == "old-server") | .id' devices.json)
        if [ -n "$DEVICE_ID" ]; then
          curl -s -X DELETE https://api.tailscale.com/api/v2/device/$DEVICE_ID \
            -H "Authorization: Bearer $TOKEN"
        fi

    - name: Copy IP addresses
      run: |
        # Example: Extract and output IP addresses
        jq -r '.devices[] | .addresses[]' devices.json > ip_addresses.txt
        cat ip_addresses.txt
```

#### Notes
- **Security:** Ensure that secrets are not exposed in logs. The example above uses GitHub Actions' built-in secret handling to keep credentials secure.
- **Customization:** You’ll need to implement logic to identify which devices to delete based on your criteria (e.g., device age or hostname). The example uses a placeholder for selecting a device named "old-server".
- **Tailnet Identifier:** The `TAILSCALE_TAILNET` secret should contain your tailnet identifier, found in the Tailscale admin console under General settings as the "Organization" name or using `-` for the default tailnet.
- **Documentation:** For more details, refer to the [Tailscale OAuth Clients Documentation](https://tailscale.com/kb/1215/oauth-clients) and [Tailscale GitHub Action Documentation](https://tailscale.com/kb/1276/tailscale-github-action).

---

### Detailed Guide for Switching to Tailscale OAuth in GitHub Actions

This section provides a comprehensive guide to help you transition from using Tailscale auth keys to OAuth keys and client ID secrets in your GitHub Actions deployment. It covers the setup process, configuration details, and implementation steps to authenticate with your Tailscale tailnet, delete old server connections, and read IP addresses for copying. The guide is designed to be thorough, ensuring you have all the necessary information to implement this change securely and effectively.

#### Understanding Tailscale Authentication
Tailscale provides two primary methods for authenticating devices and API access: auth keys and OAuth clients. Auth keys are simple, fully-permitted keys tied to a user, with a maximum expiry of 90 days, suitable for basic automation but less secure due to their broad permissions. OAuth clients, introduced to enhance security, allow fine-grained control through scopes, enabling specific operations like device management or DNS access. Unlike auth keys, OAuth clients do not expire, and their access tokens are short-lived (1 hour), supporting the principle of least privilege. For your use case, OAuth clients are recommended for their security and flexibility in GitHub Actions workflows.

#### Step-by-Step Setup

##### 1. Create an OAuth Client
To begin, you need to create an OAuth client in the Tailscale admin console with the appropriate scopes and tags to support your GitHub Actions workflow.

- **Access the Admin Console:** Log in to your Tailscale admin console as an Owner, Admin, Network admin, or IT admin.
- **Navigate to OAuth Clients:** Go to the "OAuth clients" page.
- **Generate a New Client:** Select the option to create a new OAuth client.
- **Select Scopes:** Choose the following scopes:
  - **`auth_keys`:** Required for the Tailscale GitHub Action to create an ephemeral node for network connectivity. This scope allows the client to generate authentication keys programmatically.
  - **devices:core:** Grants read and write access to the list of devices in your tailnet, enabling you to list devices (to read IP addresses) and delete devices (to remove old server connections).
- **Assign Tags:** Since OAuth clients are not associated with a user, you must assign at least one tag to define access permissions for nodes created by the workflow. For example, use `tag:ci` or a custom tag defined in your tailnet’s Access Control Lists (ACLs). Ensure the tag aligns with your ACL policies to allow necessary access within the tailnet.
- **Record Credentials:** After creation, Tailscale provides a client ID and client secret. Note these down securely, as they will be used in your GitHub Actions workflow.

**Table 1: Required OAuth Scopes**
| Scope          | Purpose                                                                 |
|----------------|-------------------------------------------------------------------------|
| `auth_keys`    | Allows the GitHub Action to create an ephemeral node for tailnet access. |
| `devices:core` | Enables reading (listing IPs) and writing (deleting) devices in the tailnet. |

##### 2. Store Secrets in GitHub
To securely use the OAuth client credentials and tailnet identifier in your workflow, store them as encrypted secrets in your GitHub repository.

- **Navigate to Repository Settings:** In your GitHub repository, go to "Settings" > "Secrets and variables" > "Actions".
- **Add Secrets:** Create the following secrets:
  - `TS_OAUTH_CLIENT_ID`: The client ID from the OAuth client creation.
  - `TS_OAUTH_SECRET`: The client secret from the OAuth client creation.
  - `TAILSCALE_TAILNET`: Your tailnet identifier, found in the Tailscale admin console under General settings as the "Organization" name. For single-user tailnets, you can use `-` as a shorthand for the default tailnet.
- **Security Note:** Ensure these secrets are stored securely and not exposed in logs or source code. GitHub’s encrypted secrets are designed to protect sensitive information during workflow execution.

##### 3. Update the GitHub Actions Workflow
Modify your existing GitHub Actions workflow to use the Tailscale GitHub Action for connecting to your tailnet and to include steps for managing devices via the Tailscale API. The workflow will:
- Connect to the tailnet using the OAuth client.
- Obtain a short-lived access token for API calls.
- Perform device management tasks (listing and deleting devices).

**Workflow Components:**
- **Tailscale GitHub Action:** Uses the `tailscale/github-action@v3` action to connect the runner to your tailnet, creating an ephemeral node that is automatically removed after the workflow completes.
- **Access Token Retrieval:** Makes a POST request to the Tailscale OAuth token endpoint to obtain an access token using the client credentials grant.
- **API Calls:** Uses the access token to interact with the Tailscale API, specifically to list devices (to extract IP addresses) and delete old devices.

**Example Workflow:**

```yaml
name: Tailscale Deployment

on: [push]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Tailscale
      uses: tailscale/github-action@v3
      with:
        oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
        oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
        tags: tag:ci  # Replace with your chosen tags

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Get Tailscale access token
      id: get_token
      run: |
        TOKEN=$(curl -s -X POST https://api.tailscale.com/oauth/token \
          -d "grant_type=client_credentials" \
          -d "client_id=${{ secrets.TS_OAUTH_CLIENT_ID }}" \
          -d "client_secret=${{ secrets.TS_OAUTH_SECRET }}" | jq -r .access_token)
        echo "TOKEN=$TOKEN" >> $GITHUB_ENV

    - name: List devices
      id: list_devices
      run: |
        curl -s -X GET https://api.tailscale.com/api/v2/tailnet/${{ secrets.TAILSCALE_TAILNET }}/devices \
          -H "Authorization: Bearer $TOKEN" > devices.json
        cat devices.json

    - name: Delete old devices
      run: |
        # Example: Delete a device by ID (replace with your logic to identify old devices)
        DEVICE_ID=$(jq -r '.devices[] | select(.hostname == "old-server") | .id' devices.json)
        if [ -n "$DEVICE_ID" ]; then
          curl -s -X DELETE https://api.tailscale.com/api/v2/device/$DEVICE_ID \
            -H "Authorization: Bearer $TOKEN"
        fi

    - name: Copy IP addresses
      run: |
        # Example: Extract and output IP addresses
        jq -r '.devices[] | .addresses[]' devices.json > ip_addresses.txt
        cat ip_addresses.txt
```

**Workflow Explanation:**
- **Checkout Code:** Clones the repository to the runner.
- **Set up Tailscale:** Uses the Tailscale GitHub Action to connect the runner to your tailnet, creating an ephemeral node tagged with `tag:ci` (replace with your tag).
- **Install jq:** Installs the `jq` tool to parse JSON responses from the API.
- **Get Access Token:** Makes a POST request to the Tailscale OAuth token endpoint (`https://api.tailscale.com/oauth/token`) using the client credentials grant to obtain a short-lived access token, stored in the `TOKEN` environment variable.
- **List Devices:** Calls the GET `/api/v2/tailnet/{tailnet}/devices` endpoint to retrieve a list of devices, saving the response to `devices.json`.
- **Delete Old Devices:** Uses `jq` to extract the ID of a device (e.g., named "old-server") and makes a DELETE request to `/api/v2/device/{deviceid}` to remove it. You’ll need to customize the logic to identify which devices to delete based on your criteria (e.g., age, hostname).
- **Copy IP Addresses:** Extracts IP addresses from the device list using `jq` and saves them to a file (`ip_addresses.txt`) for copying or further use.

**Table 2: Key API Endpoints**
| Endpoint                                    | Method | Scope          | Purpose                              |
|---------------------------------------------|--------|----------------|--------------------------------------|
| `/api/v2/tailnet/{tailnet}/devices`         | GET    | `devices:core` | List all devices and their IPs.      |
| `/api/v2/device/{deviceid}`                 | DELETE | `devices:core` | Delete a specific device by ID.      |
| `https://api.tailscale.com/oauth/token`     | POST   | N/A            | Obtain an access token.              |

#### Additional Considerations
- **Tailnet Identifier:** The `TAILSCALE_TAILNET` secret should match the tailnet identifier from your Tailscale admin console. For single-user tailnets, you can use `-` as a shorthand. Verify this in the General settings under "Organization".
- **Device Deletion Logic:** The example workflow uses a simple filter for a device named "old-server". You may need to implement more complex logic to identify old devices, such as checking the `lastSeen` timestamp in the device list response.
- **IP Address Handling:** The workflow saves IP addresses to a file. Depending on your needs, you might output them to logs, store them in an artifact, or pass them to another step.
- **Security Best Practices:** Ensure that the access token and secrets are not exposed in logs. Use GitHub’s secret masking and avoid echoing sensitive data. Consider using a secrets manager for additional security.
- **Tag Configuration:** The tags assigned to the OAuth client must align with your tailnet’s ACLs to ensure the ephemeral node has the necessary access. Check your ACLs in the Tailscale admin console to confirm permissions.
- **Access Token Expiry:** The access token expires after 1 hour. For long-running workflows, you may need to refresh the token by repeating the token request step.
- **Error Handling:** Add error handling for API calls (e.g., checking for HTTP 403 Forbidden errors due to incorrect tailnet or permissions) to make the workflow robust.

#### Comparison with Auth Keys
Using OAuth clients offers several advantages over auth keys:
- **Scoped Access:** Unlike auth keys, which grant full permissions, OAuth clients allow you to limit access to specific operations (e.g., device management only).
- **Non-Expiring Credentials:** OAuth client credentials do not expire, unlike auth keys (90-day max), reducing the need for frequent key rotation.
- **Audit Logging:** OAuth client usage is logged in the Tailscale configuration audit logs, enhancing security monitoring.
- **Ephemeral Nodes:** The Tailscale GitHub Action creates ephemeral nodes that are automatically removed, improving security by reducing stale device entries.

**Table 3: Auth Keys vs. OAuth Clients**
| Feature                | Auth Keys                     | OAuth Clients                     |
|------------------------|-------------------------------|-----------------------------------|
| Expiry                 | Up to 90 days                | Non-expiring credentials         |
| Scope                  | Full permissions             | Fine-grained scopes (e.g., `devices:core`) |
| GitHub Action Support   | Supported, but less secure   | Recommended, with ephemeral nodes |
| Audit Logging          | Limited                      | Detailed logging in admin console |

#### Troubleshooting
- **403 Forbidden Error:** If you encounter a "user tailnet does not match" error when listing devices, verify that the `TAILSCALE_TAILNET` secret matches the organization name in the Tailscale admin console. Using `-` can resolve this for single-user tailnets.
- **Missing Scopes:** Ensure the OAuth client has both `auth_keys` and `devices:core` scopes. Missing scopes will result in permission errors.
- **Tag Issues:** If the workflow cannot access certain nodes, check that the tags assigned to the OAuth client align with your ACL policies.
- **Token Expiry:** If API calls fail due to token expiry, refresh the token by repeating the token request step.

#### References
- [Tailscale OAuth Clients Documentation](https://tailscale.com/kb/1215/oauth-clients)
- [Tailscale GitHub Action Documentation](https://tailscale.com/kb/1276/tailscale-github-action)
- [Tailscale API Documentation](https://github.com/tailscale/tailscale/blob/main/api.md)
- [Tailscale Device Management](https://tailscale.com/kb/1372/manage-devices)
- [Tailscale Device Removal](https://tailscale.com/kb/1260/device-remove)

This guide should enable you to successfully switch to using Tailscale OAuth clients in your GitHub Actions deployment, providing a secure and efficient way to manage your tailnet and perform the required device operations.