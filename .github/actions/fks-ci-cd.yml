# FKS CI/CD Pipeline Template
# Standardized GitHub Actions workflow for FKS microservices

name: FKS Service CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      service_name:
        description: 'Service name override'
        required: false
        type: string

env:
  # FKS Standard Environment Variables
  FKS_SERVICE_NAME: ${{ github.event.repository.name }}
  FKS_REGISTRY: ghcr.io
  FKS_IMAGE_NAME: ${{ github.repository }}
  FKS_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
  
  # Build Configuration
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  
  # Service Detection Variables
  IS_PYTHON_SERVICE: ${{ contains('fks-api fks-auth fks-data fks-engine fks-training fks-transformer fks-worker', github.event.repository.name) }}
  IS_RUST_SERVICE: ${{ contains('fks-execution fks-nodes fks-config', github.event.repository.name) }}
  IS_DOTNET_SERVICE: ${{ contains('fks-ninja', github.event.repository.name) }}
  IS_REACT_SERVICE: ${{ contains('fks-web', github.event.repository.name) }}
  IS_NGINX_SERVICE: ${{ contains('fks-nginx', github.event.repository.name) }}

jobs:
  # Service Detection and Configuration
  detect-service:
    runs-on: ubuntu-latest
    outputs:
      service-type: ${{ steps.detect.outputs.service-type }}
      service-port: ${{ steps.detect.outputs.service-port }}
      dockerfile-template: ${{ steps.detect.outputs.dockerfile-template }}
      test-command: ${{ steps.detect.outputs.test-command }}
      build-args: ${{ steps.detect.outputs.build-args }}
    steps:
      - name: Detect Service Type
        id: detect
        run: |
          SERVICE_NAME="${{ github.event.repository.name }}"
          
          case "$SERVICE_NAME" in
            fks-api) 
              echo "service-type=python" >> $GITHUB_OUTPUT
              echo "service-port=8001" >> $GITHUB_OUTPUT
              echo "dockerfile-template=python" >> $GITHUB_OUTPUT
              echo "test-command=pytest" >> $GITHUB_OUTPUT
              echo "build-args=SERVICE_TYPE=api" >> $GITHUB_OUTPUT
              ;;
            fks-auth)
              echo "service-type=python" >> $GITHUB_OUTPUT
              echo "service-port=8002" >> $GITHUB_OUTPUT
              echo "dockerfile-template=python" >> $GITHUB_OUTPUT
              echo "test-command=pytest" >> $GITHUB_OUTPUT
              echo "build-args=SERVICE_TYPE=auth" >> $GITHUB_OUTPUT
              ;;
            fks-data)
              echo "service-type=python" >> $GITHUB_OUTPUT
              echo "service-port=8003" >> $GITHUB_OUTPUT
              echo "dockerfile-template=python" >> $GITHUB_OUTPUT
              echo "test-command=pytest" >> $GITHUB_OUTPUT
              echo "build-args=SERVICE_TYPE=data" >> $GITHUB_OUTPUT
              ;;
            fks-engine)
              echo "service-type=python" >> $GITHUB_OUTPUT
              echo "service-port=8004" >> $GITHUB_OUTPUT
              echo "dockerfile-template=python" >> $GITHUB_OUTPUT
              echo "test-command=pytest" >> $GITHUB_OUTPUT
              echo "build-args=SERVICE_TYPE=engine" >> $GITHUB_OUTPUT
              ;;
            fks-training)
              echo "service-type=python" >> $GITHUB_OUTPUT
              echo "service-port=8005" >> $GITHUB_OUTPUT
              echo "dockerfile-template=python" >> $GITHUB_OUTPUT
              echo "test-command=pytest" >> $GITHUB_OUTPUT
              echo "build-args=SERVICE_TYPE=training" >> $GITHUB_OUTPUT
              ;;
            fks-transformer)
              echo "service-type=python" >> $GITHUB_OUTPUT
              echo "service-port=8006" >> $GITHUB_OUTPUT
              echo "dockerfile-template=python" >> $GITHUB_OUTPUT
              echo "test-command=pytest" >> $GITHUB_OUTPUT
              echo "build-args=SERVICE_TYPE=transformer" >> $GITHUB_OUTPUT
              ;;
            fks-worker)
              echo "service-type=python" >> $GITHUB_OUTPUT
              echo "service-port=8007" >> $GITHUB_OUTPUT
              echo "dockerfile-template=python" >> $GITHUB_OUTPUT
              echo "test-command=pytest" >> $GITHUB_OUTPUT
              echo "build-args=SERVICE_TYPE=worker" >> $GITHUB_OUTPUT
              ;;
            fks-execution|fks-nodes|fks-config)
              echo "service-type=rust" >> $GITHUB_OUTPUT
              echo "service-port=8080" >> $GITHUB_OUTPUT
              echo "dockerfile-template=rust" >> $GITHUB_OUTPUT
              echo "test-command=cargo test" >> $GITHUB_OUTPUT
              echo "build-args=SERVICE_TYPE=engine" >> $GITHUB_OUTPUT
              ;;
            fks-ninja)
              echo "service-type=dotnet" >> $GITHUB_OUTPUT
              echo "service-port=8080" >> $GITHUB_OUTPUT
              echo "dockerfile-template=dotnet" >> $GITHUB_OUTPUT
              echo "test-command=dotnet test" >> $GITHUB_OUTPUT
              echo "build-args=SERVICE_TYPE=ninja" >> $GITHUB_OUTPUT
              ;;
            fks-web)
              echo "service-type=react" >> $GITHUB_OUTPUT
              echo "service-port=3000" >> $GITHUB_OUTPUT
              echo "dockerfile-template=react" >> $GITHUB_OUTPUT
              echo "test-command=npm test" >> $GITHUB_OUTPUT
              echo "build-args=SERVICE_TYPE=frontend" >> $GITHUB_OUTPUT
              ;;
            fks-nginx)
              echo "service-type=nginx" >> $GITHUB_OUTPUT
              echo "service-port=80" >> $GITHUB_OUTPUT
              echo "dockerfile-template=nginx" >> $GITHUB_OUTPUT
              echo "test-command=nginx -t" >> $GITHUB_OUTPUT
              echo "build-args=SERVICE_TYPE=proxy" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "service-type=generic" >> $GITHUB_OUTPUT
              echo "service-port=8000" >> $GITHUB_OUTPUT
              echo "dockerfile-template=base" >> $GITHUB_OUTPUT
              echo "test-command=echo 'No tests defined'" >> $GITHUB_OUTPUT
              echo "build-args=SERVICE_TYPE=generic" >> $GITHUB_OUTPUT
              ;;
          esac

  # Code Quality and Security Checks
  quality-checks:
    runs-on: ubuntu-latest
    needs: detect-service
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Service Environment
        run: |
          SERVICE_TYPE="${{ needs.detect-service.outputs.service-type }}"
          echo "Setting up environment for $SERVICE_TYPE service"
          
          # Create FKS environment file
          cat > .env << EOF
          FKS_SERVICE_NAME=${{ env.FKS_SERVICE_NAME }}
          FKS_SERVICE_TYPE=$SERVICE_TYPE
          FKS_SERVICE_PORT=${{ needs.detect-service.outputs.service-port }}
          FKS_ENVIRONMENT=${{ env.FKS_ENVIRONMENT }}
          FKS_LOG_LEVEL=INFO
          FKS_HEALTH_CHECK_PATH=/health
          FKS_METRICS_PATH=/metrics
          EOF

      - name: Python Quality Checks
        if: needs.detect-service.outputs.service-type == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Python Linting and Testing
        if: needs.detect-service.outputs.service-type == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pytest pytest-cov mypy
          
          # Install project dependencies
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi
          if [ -f "requirements.dev.txt" ]; then pip install -r requirements.dev.txt; fi
          if [ -f "pyproject.toml" ]; then pip install -e .; fi
          
          # Code formatting check
          black --check .
          isort --check-only .
          
          # Linting
          flake8 src/ tests/
          
          # Type checking
          mypy src/
          
          # Testing
          pytest --cov=src --cov-report=xml

      - name: Rust Quality Checks
        if: needs.detect-service.outputs.service-type == 'rust'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Rust Linting and Testing
        if: needs.detect-service.outputs.service-type == 'rust'
        run: |
          # Code formatting check
          cargo fmt --all -- --check
          
          # Linting
          cargo clippy -- -D warnings
          
          # Testing
          cargo test --all-features

      - name: .NET Quality Checks
        if: needs.detect-service.outputs.service-type == 'dotnet'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: .NET Build and Test
        if: needs.detect-service.outputs.service-type == 'dotnet'
        run: |
          # Restore dependencies
          dotnet restore
          
          # Build
          dotnet build --no-restore --configuration Release
          
          # Test
          dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage"

      - name: React Quality Checks
        if: needs.detect-service.outputs.service-type == 'react'
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: React Linting and Testing
        if: needs.detect-service.outputs.service-type == 'react'
        run: |
          # Install dependencies
          npm ci
          
          # Linting
          npm run lint
          
          # Type checking
          npm run type-check
          
          # Testing
          npm test -- --coverage --watchAll=false
          
          # Build test
          npm run build

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: ${{ needs.detect-service.outputs.service-type }}
          name: ${{ env.FKS_SERVICE_NAME }}

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: detect-service
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker Build and Push
  build-and-push:
    runs-on: ubuntu-latest
    needs: [detect-service, quality-checks]
    if: github.event_name != 'pull_request'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.FKS_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FKS_REGISTRY }}/${{ env.FKS_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE_NAME=${{ env.FKS_SERVICE_NAME }}
            SERVICE_PORT=${{ needs.detect-service.outputs.service-port }}
            ${{ needs.detect-service.outputs.build-args }}
            BUILDKIT_INLINE_CACHE=1

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.FKS_REGISTRY }}/${{ env.FKS_IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Health Check Testing
  health-check-test:
    runs-on: ubuntu-latest
    needs: [detect-service, build-and-push]
    if: github.event_name != 'pull_request'
    steps:
      - name: Test Health Endpoints
        run: |
          SERVICE_PORT="${{ needs.detect-service.outputs.service-port }}"
          IMAGE_TAG="${{ env.FKS_REGISTRY }}/${{ env.FKS_IMAGE_NAME }}:${{ github.sha }}"
          
          echo "🧪 Testing health endpoints for $IMAGE_TAG"
          
          # Run container
          docker run -d --name test-service -p $SERVICE_PORT:$SERVICE_PORT $IMAGE_TAG
          
          # Wait for service to start
          sleep 30
          
          # Test health endpoint
          curl -f http://localhost:$SERVICE_PORT/health || exit 1
          echo "✅ Basic health check passed"
          
          # Test detailed health endpoint (if available)
          curl -f http://localhost:$SERVICE_PORT/health/detailed || echo "⚠️ Detailed health check not available"
          
          # Test readiness endpoint (if available)
          curl -f http://localhost:$SERVICE_PORT/health/ready || echo "⚠️ Readiness check not available"
          
          # Test metrics endpoint (if available)
          curl -f http://localhost:$SERVICE_PORT/metrics || echo "⚠️ Metrics endpoint not available"
          
          # Cleanup
          docker stop test-service
          docker rm test-service
          
          echo "🎉 Health check testing completed"

  # Deploy to Environment
  deploy:
    runs-on: ubuntu-latest
    needs: [detect-service, build-and-push, health-check-test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ env.FKS_ENVIRONMENT }}
    steps:
      - name: Deploy to Environment
        run: |
          echo "🚀 Deploying ${{ env.FKS_SERVICE_NAME }} to ${{ env.FKS_ENVIRONMENT }}"
          echo "📦 Image: ${{ needs.build-and-push.outputs.image-tags }}"
          echo "🔐 Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          
          # Add your deployment logic here
          # This could integrate with your deployment system (Kubernetes, Docker Swarm, etc.)
          
          echo "✅ Deployment completed successfully"

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [detect-service, build-and-push]
    if: always()
    steps:
      - name: Cleanup Resources
        run: |
          echo "🧹 Cleaning up resources"
          # Add cleanup logic if needed
          echo "✅ Cleanup completed"
