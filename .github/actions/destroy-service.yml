name: 🗑️ Service Cleanup & Destroy

on:
  workflow_dispatch:
    inputs:
      service_name:
        description: 'Name of the service to destroy'
        required: true
        type: choice
        options:
          - 'fks'
          - 'nginx'
          - 'ats'
          - 'custom'
      
      destroy_scope:
        description: 'What to destroy'
        required: true
        type: choice
        options:
          - 'service-only'          # Stop and remove service containers/processes
          - 'full-server'           # Destroy entire Linode server
          - 'reset-service'         # Stop service and reset to clean state
        default: 'service-only'
      
      confirm_destruction:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string

env:
  SERVICE_NAME: ${{ inputs.service_name }}
  DESTROY_SCOPE: ${{ inputs.destroy_scope }}

jobs:
  # ============================================================================
  # Validation & Confirmation
  # ============================================================================
  validate-destruction:
    name: ⚠️ Validate Destruction Request
    runs-on: ubuntu-latest
    outputs:
      confirmed: ${{ steps.validate.outputs.confirmed }}
    
    steps:
      - name: ⚠️ Validate Confirmation
        id: validate
        run: |
          if [[ "${{ inputs.confirm_destruction }}" != "DESTROY" ]]; then
            echo "❌ Destruction not confirmed. You must type 'DESTROY' exactly."
            echo "confirmed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ Destruction confirmed for ${{ env.SERVICE_NAME }}"
          echo "Scope: ${{ env.DESTROY_SCOPE }}"
          echo "confirmed=true" >> $GITHUB_OUTPUT

  # ============================================================================
  # Service Cleanup
  # ============================================================================
  cleanup-service:
    name: 🧹 Cleanup Service
    runs-on: ubuntu-latest
    needs: validate-destruction
    if: needs.validate-destruction.outputs.confirmed == 'true'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Linode CLI
        if: inputs.destroy_scope == 'full-server'
        run: |
          echo "🔧 Installing Linode CLI..."
          pip install linode-cli
          
          # Configure Linode CLI
          mkdir -p ~/.config/linode-cli
          cat > ~/.config/linode-cli/config << EOF
          [DEFAULT]
          default-user = DEFAULT
          
          [DEFAULT]
          token = ${{ secrets.LINODE_CLI_TOKEN }}
          EOF
          
          chmod 600 ~/.config/linode-cli/config

      - name: 🔍 Find Target Server
        id: find-server
        run: |
          echo "🔍 Finding server for ${{ env.SERVICE_NAME }}..."
          
          if [[ "${{ inputs.destroy_scope }}" == "full-server" ]]; then
            # Find Linode server
            SERVER_INFO=$(linode-cli linodes list --text --no-headers | grep "${{ env.SERVICE_NAME }}" | head -1)
            if [[ -n "$SERVER_INFO" ]]; then
              SERVER_ID=$(echo "$SERVER_INFO" | cut -f1)
              SERVER_IP=$(echo "$SERVER_INFO" | cut -f5)
              SERVER_LABEL=$(echo "$SERVER_INFO" | cut -f2)
              
              echo "Found server: $SERVER_LABEL (ID: $SERVER_ID, IP: $SERVER_IP)"
              echo "server_id=$SERVER_ID" >> $GITHUB_OUTPUT
              echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
              echo "server_label=$SERVER_LABEL" >> $GITHUB_OUTPUT
              echo "found=true" >> $GITHUB_OUTPUT
            else
              echo "⚠️ No server found matching '${{ env.SERVICE_NAME }}'"
              echo "found=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Service-only cleanup - will attempt to connect via Tailscale"
            echo "found=true" >> $GITHUB_OUTPUT
          fi

      - name: 🗑️ Cleanup Service Containers
        if: steps.find-server.outputs.found == 'true' && inputs.destroy_scope != 'full-server'
        run: |
          echo "🗑️ Cleaning up ${{ env.SERVICE_NAME }} service containers..."
          
          # Create cleanup script
          cat > cleanup-service.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail
          
          echo "🛑 Stopping all containers for ${{ env.SERVICE_NAME }}..."
          
          # Stop Docker containers
          if docker ps -q | wc -l | grep -q "0"; then
            echo "No Docker containers running"
          else
            echo "Stopping all Docker containers..."
            docker stop $(docker ps -q) || true
          fi
          
          if [[ "${{ inputs.destroy_scope }}" == "reset-service" ]]; then
            echo "🧹 Removing containers and volumes..."
            docker system prune -af --volumes || true
            
            # Remove service directory
            if [[ -d "/home/${{ env.SERVICE_NAME }}_user/${{ env.SERVICE_NAME }}" ]]; then
              echo "Removing service directory..."
              rm -rf "/home/${{ env.SERVICE_NAME }}_user/${{ env.SERVICE_NAME }}"
            fi
          fi
          
          echo "✅ Service cleanup complete"
          EOF
          
          # Try to connect and run cleanup
          SERVER_IP="${{ steps.find-server.outputs.server_ip }}"
          
          if [[ -n "$SERVER_IP" ]]; then
            echo "Connecting to server at $SERVER_IP..."
            scp cleanup-service.sh root@$SERVER_IP:/tmp/
            ssh root@$SERVER_IP "chmod +x /tmp/cleanup-service.sh && /tmp/cleanup-service.sh"
          else
            echo "⚠️ No server IP available - cannot perform service cleanup"
          fi

      - name: 💥 Destroy Linode Server
        if: steps.find-server.outputs.found == 'true' && inputs.destroy_scope == 'full-server'
        run: |
          echo "💥 Destroying Linode server..."
          
          SERVER_ID="${{ steps.find-server.outputs.server_id }}"
          SERVER_LABEL="${{ steps.find-server.outputs.server_label }}"
          
          echo "⚠️ FINAL WARNING: About to destroy server '$SERVER_LABEL' (ID: $SERVER_ID)"
          echo "This action is IRREVERSIBLE!"
          
          # Delete the server
          linode-cli linodes delete "$SERVER_ID"
          
          echo "✅ Server '$SERVER_LABEL' has been destroyed"

      - name: 🧹 Cleanup DNS Records
        if: steps.find-server.outputs.found == 'true' && inputs.destroy_scope == 'full-server'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          if [[ -n "$CLOUDFLARE_API_TOKEN" && -n "$CLOUDFLARE_ZONE_ID" ]]; then
            echo "🧹 Cleaning up DNS records for ${{ env.SERVICE_NAME }}..."
            
            DOMAIN="${{ env.SERVICE_NAME }}.7gram.xyz"
            
            # Find and delete DNS record
            RECORD_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records?name=$DOMAIN" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" | \
              jq -r '.result[0].id // empty')
            
            if [[ -n "$RECORD_ID" && "$RECORD_ID" != "null" ]]; then
              curl -s -X DELETE "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records/$RECORD_ID" \
                -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN"
              echo "✅ DNS record for $DOMAIN deleted"
            else
              echo "ℹ️ No DNS record found for $DOMAIN"
            fi
          else
            echo "ℹ️ Cloudflare credentials not available - skipping DNS cleanup"
          fi

  # ============================================================================
  # Notification
  # ============================================================================
  notify-destruction:
    name: 📢 Notify Destruction
    runs-on: ubuntu-latest
    needs: [validate-destruction, cleanup-service]
    if: always() && needs.validate-destruction.outputs.confirmed == 'true'
    
    steps:
      - name: 📢 Discord Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        if: env.DISCORD_WEBHOOK != ''
        run: |
          echo "📢 Sending destruction notification..."
          
          # Determine cleanup status
          if [[ "${{ needs.cleanup-service.result }}" == "success" ]]; then
            STATUS="✅ DESTROYED"
            COLOR="15158332"  # Red color for destruction
          else
            STATUS="❌ DESTRUCTION FAILED"
            COLOR="15158332"
          fi
          
          # Send Discord webhook
          curl -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"$STATUS: ${{ env.SERVICE_NAME }} Service\",
                \"description\": \"Service: ${{ env.SERVICE_NAME }}\\nScope: ${{ env.DESTROY_SCOPE }}\\nInitiated by: ${{ github.actor }}\",
                \"color\": $COLOR,
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }" \
            "$DISCORD_WEBHOOK"
          
          echo "✅ Destruction notification sent"
